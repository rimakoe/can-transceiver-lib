cmake_minimum_required(VERSION 3.8)
project(can-transceiver-lib)

# include for standard directories
include(GNUInstallDirs)

# include for creating config.cmake
include(CMakePackageConfigHelpers)

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

set(AUTOGENERATED_FILE_NAME can1)
set(AUTOGENERATED_FILE_NAME_TRANSCEIVER transceiver)
set(CAN_DBC_FILE_NAME can1.dbc)

execute_process(
  COMMAND python3 "-m" "cantools" "generate_c_source" "--prune" "${CMAKE_CURRENT_SOURCE_DIR}/dbc/${CAN_DBC_FILE_NAME}" "--database-name" "${AUTOGENERATED_FILE_NAME}"
  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/src"
  )

execute_process(
    COMMAND mv ${CMAKE_CURRENT_SOURCE_DIR}/src/${AUTOGENERATED_FILE_NAME}.h ${CMAKE_CURRENT_SOURCE_DIR}/include/${PROJECT_NAME}/${AUTOGENERATED_FILE_NAME}.h    
    COMMAND mv ${CMAKE_CURRENT_SOURCE_DIR}/src/${AUTOGENERATED_FILE_NAME}.c ${CMAKE_CURRENT_SOURCE_DIR}/src/${AUTOGENERATED_FILE_NAME}.cpp
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/src"
)

if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)
execute_process(
  COMMAND python3 "-m" "cantools" 
  "generate_c_source_endec" "${CMAKE_CURRENT_SOURCE_DIR}/dbc/${CAN_DBC_FILE_NAME}"
  "--prune"
  "--database-name" "${AUTOGENERATED_FILE_NAME}"
  "--output-headers" "include/can-transceiver-lib"
  "--output-sources" "src"
  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
  )
  add_library(${PROJECT_NAME} STATIC src/${AUTOGENERATED_FILE_NAME}.cpp)

else()
execute_process(
  COMMAND python3 "-m" "cantools" 
  "generate_c_source_transceiver" "${CMAKE_CURRENT_SOURCE_DIR}/dbc/${CAN_DBC_FILE_NAME}"
  "--prune"
  "--database-name" "${AUTOGENERATED_FILE_NAME}"
  "--output-headers" "include/can-transceiver-lib"
  "--output-sources" "src"
  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
  )

  add_library(${PROJECT_NAME} STATIC src/${AUTOGENERATED_FILE_NAME}.cpp src/${AUTOGENERATED_FILE_NAME_TRANSCEIVER}.cpp)
endif()


message(STATUS "Preparing for processor type: ${CMAKE_SYSTEM_PROCESSOR}")

# Cross compile for arm (STM)
if(CMAKE_SYSTEM_PROCESSOR STREQUAL arm)
  set(MCU_FAMILY STM32F4xx)
  include(${CMAKE_CURRENT_SOURCE_DIR}/../../example_project_cmake/cmake/options_cpu.cmake)

  # Compiler options
  include(${CMAKE_CURRENT_SOURCE_DIR}/../../example_project_cmake/cmake/options_compiler.cmake)
  target_compile_options(${PROJECT_NAME} PRIVATE
      ${OPTIONS_CPU}
      ${OPTIONS_COMPILER})

  # Linker options
  include(${CMAKE_CURRENT_SOURCE_DIR}/../../example_project_cmake/cmake/options_linker.cmake)
  target_link_options(${PROJECT_NAME} PRIVATE
      $<$<BOOL:${MCU_LINKER_SCRIPT}>:-T${MCU_LINKER_SCRIPT}>
      ${OPTIONS_CPU}
      ${OPTIONS_LINKER}
      )
endif()

include_directories(include/${PROJECT_NAME})
include_directories(include)

# Link the desire include directories of the library - different for build and install
target_include_directories(${PROJECT_NAME} 
                        PUBLIC
                        "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>"
                        "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>"
                        )

install(TARGETS ${PROJECT_NAME}
        EXPORT ${PROJECT_NAME}Targets
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
        INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

install(DIRECTORY include/${PROJECT_NAME} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

install(EXPORT ${PROJECT_NAME}Targets
        FILE ${PROJECT_NAME}Targets.cmake
        NAMESPACE  canlib::
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
  "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)

install(FILES
          "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}
)